// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package greeter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//请求
type UserRq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRq) Reset()         { *m = UserRq{} }
func (m *UserRq) String() string { return proto.CompactTextString(m) }
func (*UserRq) ProtoMessage()    {}
func (*UserRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *UserRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRq.Unmarshal(m, b)
}
func (m *UserRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRq.Marshal(b, m, deterministic)
}
func (m *UserRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRq.Merge(m, src)
}
func (m *UserRq) XXX_Size() int {
	return xxx_messageInfo_UserRq.Size(m)
}
func (m *UserRq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRq.DiscardUnknown(m)
}

var xxx_messageInfo_UserRq proto.InternalMessageInfo

func (m *UserRq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

//响应
type UserRp struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRp) Reset()         { *m = UserRp{} }
func (m *UserRp) String() string { return proto.CompactTextString(m) }
func (*UserRp) ProtoMessage()    {}
func (*UserRp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *UserRp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRp.Unmarshal(m, b)
}
func (m *UserRp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRp.Marshal(b, m, deterministic)
}
func (m *UserRp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRp.Merge(m, src)
}
func (m *UserRp) XXX_Size() int {
	return xxx_messageInfo_UserRp.Size(m)
}
func (m *UserRp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRp.DiscardUnknown(m)
}

var xxx_messageInfo_UserRp proto.InternalMessageInfo

func (m *UserRp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*UserRq)(nil), "xgrpcd.UserRq")
	proto.RegisterType((*UserRp)(nil), "xgrpcd.UserRp")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xab, 0x00, 0x71, 0x52, 0x94, 0x24, 0xb8, 0xd8,
	0x42, 0x8b, 0x53, 0x8b, 0x82, 0x0a, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x58, 0x83, 0x98, 0x32, 0x53, 0x94, 0x64, 0xa0, 0x32, 0x05, 0x42, 0x42, 0x5c, 0x2c, 0x79,
	0x89, 0xb9, 0xa9, 0x60, 0x39, 0xce, 0x20, 0x30, 0xdb, 0xc8, 0x90, 0x8b, 0xc5, 0x25, 0xb1, 0x24,
	0x51, 0x48, 0x93, 0x8b, 0xdd, 0x3d, 0xb5, 0x04, 0xa4, 0x50, 0x88, 0x4f, 0x0f, 0x62, 0xa6, 0x1e,
	0xc4, 0x40, 0x29, 0x54, 0x7e, 0x41, 0x12, 0x1b, 0xd8, 0x66, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xc8, 0xc8, 0x76, 0x88, 0x87, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	GetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetUser(ctx context.Context, in *UserRq, opts ...grpc.CallOption) (*UserRp, error) {
	out := new(UserRp)
	err := c.cc.Invoke(ctx, "/xgrpcd.Data/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	GetUser(context.Context, *UserRq) (*UserRp, error)
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpcd.Data/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetUser(ctx, req.(*UserRq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xgrpcd.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Data_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
